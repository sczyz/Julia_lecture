Julia precompiles = really really fast!


In class work: Write Buffon's Needle Monte Carlo
    
Define Problem:
    -If you draw many vertical lines on an X-Y floor, and you drop sticks that are less long than the distance between the lines, what is the probability that the stick intersects the line?
    
Define variables
    -Theta - angle of the stick with respect to X axis
    -x coordinate of the center of the stick
        -y does not matter because it is assumed an infinite plane in the Y
    -L - distance between the lines
    -l - length of stick
    
Rowwise vs columnwise storing

************************************************************************************

n = 100000
A = zeros(3,n)  #x,y,z
B = zeros(n,3)
R = rand(3,3)

function col_wise(A::Array{Float64,2}, R::Array{Float64,2})
    y = zeros(3)
    for i=1:n
        y += R*A[:,i]
    end
    return y
end

col_wise(A,R)
@time col_wise(A,R)

function row_wise(A::Array{Float64,2}, R::Array{Float64,2})
    y = zeros(3)
    for i=1:n
        y += R*A[:,i]
    end
    return y
end

row_wise(B,r)
@time row_wise(A,R)

************************************************************************************

Rowwise is 3x faster than columnwise!
-why?
    Because computer stores arrays in one way or another: rowmajor or columnmajor, where the arrays are stored in a large line as opposed to a real multidimensional array. In columnmajor codes, the matrix [1,2;3,4] would be [1 3 2 4]. Julia is a columnmajor code, so accessing values in columns is going to be much faster because the columns are right there in a line!

Parallelization
-Very easy in Julia! going off the buffons_needle example...

n_throws = [10000, 20000, 300000, 1e6, 1e7]
p_est = @parallel (+) for n = 1:length(n_throws)            #combines the estimated result
    prob_est = conduct_simulation(n_throws[n] , floor, \l)
end
println(p_est/length(n_throws)

Must define the macro:
begin @everywhere           #something like this
somewhere in your code when doing parallelization